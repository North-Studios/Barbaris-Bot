import os
from telebot import *
from telebot.types import Message, CallbackQuery
from config import Config, logger
from database import db_instance as Database
from keyboards import Keyboards
from utils import Utils


class Handlers:
    def __init__(self, bot):
        self.bot = bot
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

        # –ö–æ–º–∞–Ω–¥—ã
        @self.bot.message_handler(commands=['start', 'help'])
        def handle_start_help(message: Message):
            self.handle_start(message)

        @self.bot.message_handler(commands=['me'])
        def handle_me(message: Message):
            self.handle_me(message)

        @self.bot.message_handler(commands=['promote', 'demote'])
        def handle_promote_demote(message: Message):
            self.handle_promote_demote(message)

        @self.bot.message_handler(commands=['ban', 'unban'])
        def handle_ban_unban(message: Message):
            self.handle_ban_unban(message)

        @self.bot.message_handler(commands=['warn', 'unwarn'])
        def handle_warn_unwarn(message: Message):
            self.handle_warn_unwarn(message)

        @self.bot.message_handler(commands=['list'])
        def handle_list(message: Message):
            self.handle_list(message)

        @self.bot.message_handler(commands=['getinfo'])
        def handle_getinfo(message: Message):
            self.handle_getinfo(message)

        @self.bot.message_handler(commands=['reguser'])
        def handle_reguser(message: Message):
            self.handle_reguser(message)

        @self.bot.message_handler(commands=['op', 'unop'])
        def handle_op_unop(message: Message):
            self.handle_op_unop(message)

        @self.bot.message_handler(commands=['stats'])
        def handle_stats(message: Message):
            self.handle_stats(message)

        @self.bot.message_handler(commands=['alarm'])
        def handle_alarm(message: Message):
            self.handle_alarm(message)

        @self.bot.message_handler(commands=['chatid'])
        def handle_chatid(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chatid"""
            self.bot.send_message(message.chat.id, f"üîê CHAT ID üîê\n\n"
                                                   f"<code>{message.chat.id}</code>",
                                  parse_mode='HTML')

        # –ë–æ—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
        @self.bot.message_handler(commands=['startbot', 'stopbot', 'addbot', 'removebot'])
        def handle_bot_management(message: Message):
            self.handle_bot_management(message)

        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)
        @self.bot.message_handler(content_types=['text'])
        def handle_text_messages(message: Message):
            self.handle_text_messages(message)

        # Callback queries
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call: CallbackQuery):
            self.handle_callback_query(call)

    def handle_text_messages(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)"""
        username = message.from_user.username
        if not username:
            self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(username):
            self.bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        if Database.is_banned(username):
            self.bot.reply_to(message, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

        text = message.text.lower()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –º–µ–Ω—é
        if text == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            self.handle_stats(message)
        elif text == "üìã —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤":
            self.show_bot_list(message)
        elif text == "üîô –Ω–∞–∑–∞–¥":
            self.show_main_menu(message, username)

    def show_main_menu(self, message: Message, username: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.bot.send_message(
            message.chat.id,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=Keyboards.main_menu(username)
        )

    def show_user_list_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_local_admin(username):
            self.bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        self.bot.send_message(
            message.chat.id,
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=Keyboards.user_list_menu()
        )

    def show_bot_list(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_operator(username):
            self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤!")
            return

        bots = Database.get_all_bots()
        if not bots:
            self.bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤!")
            return

        bot_list = "ü§ñ <b>–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:</b>\n\n"
        for i, (bot_name, bot_data) in enumerate(bots.items(), 1):
            status = Utils.get_bot_status(bot_name)
            status_emoji = "üü¢" if status == "running" else "üî¥" if status == "stopped" else "‚ö´"
            bot_list += f"{i}. {bot_name} ({bot_data['username']}) {status_emoji}\n"

        self.bot.reply_to(message, bot_list, parse_mode='HTML')

    def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""

        username = message.from_user.username
        user_id = message.from_user.id
        first_name = message.from_user.first_name

        if not username:
            self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        if Database.is_banned(username):
            self.bot.reply_to(message, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

        if not Database.user_exists(username):
            Database.add_user(user_id, username, first_name)
            logger.info(f"New user @{username}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        rank = Database.get_user_rank(username)
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n"

        if rank == 'operator':
            welcome_text += "‚ö° –í—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"
        elif rank == 'gadmin':
            welcome_text += "üëë –í—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        elif rank == 'ladmin':
            welcome_text += "üë®‚Äçüíº –í—ã –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            welcome_text += "üë§ –í—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        self.bot.send_message(
            message.chat.id,
            welcome_text,
            reply_markup=Keyboards.main_menu(username)
        )

    def handle_me(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /me - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ"""
        username = message.from_user.username
        if not username:
            self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(username):
            self.bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        if Database.is_banned(username):
            self.bot.reply_to(message, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

        user_data = Database.get_user(username)
        if not user_data:
            self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
            return

        rank_text = {
            'operator': '‚ö° –û–ø–µ—Ä–∞—Ç–æ—Ä',
            'gadmin': 'üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'ladmin': 'ü™õ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }.get(user_data.get('rank', 'user'), 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

        banned_status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if Database.is_banned(username) else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        info_text = (
            "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üìß Username: @{username}\n"
            f"üë®‚Äçüíº –†–∞–Ω–≥: {rank_text}\n"
            f"üÜî ID: <code>{user_data['user_id']}</code>\n"
            f"üìõ –ò–º—è: {user_data['first_name']}"
        )
        if not user_data['rank'] in ['gadmin', 'operator']:
            info_text += (
                f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {banned_status}\n"
                f"üí¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {user_data['warns']}/{Config.MAX_WARN}"
            )

        self.bot.reply_to(message, info_text, parse_mode='HTML')

    def handle_promote_demote(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è/–ø–æ–Ω–∏–∂–µ–Ω–∏—è"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_global_admin(username):
            self.bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        parts = message.text.split()
        if len(parts) < 2:
            self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promote @username –∏–ª–∏ /demote @username")
            return

        target_username = Utils.extract_username(parts[1])
        if not target_username:
            self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(target_username):
            self.bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if Database.is_banned(target_username):
            self.bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
            return

        if parts[0].startswith('/promote'):
            # –ü–æ–≤—ã—à–µ–Ω–∏–µ
            if not Database.is_operator(username):
                self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å!")
                return

            self.bot.send_message(
                message.chat.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è @{target_username}:",
                reply_markup=Keyboards.rank_selection(target_username)
            )
        else:
            # –ü–æ–Ω–∏–∂–µ–Ω–∏–µ
            target_rank = Database.get_user_rank(target_username)

            if target_rank == 'operator' and not Database.is_operator(username):
                self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–Ω–∏–∂–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return

            Database.update_user(target_username, {'rank': 'user'})
            self.bot.reply_to(message, f"‚úÖ @{target_username} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    def handle_ban_unban(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        parts = message.text.split()
        if len(parts) < 2:
            self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username [–≤—Ä–µ–º—è_—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞] –∏–ª–∏ /unban @username")
            return

        target_username = Utils.extract_username(parts[1])
        if not target_username:
            self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(target_username):
            self.bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return

        action = "ban" if parts[0].startswith('/ban') else "unban"

        if action == "ban":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω
            can_ban, error_msg = Database.can_ban_user(username, target_username)
            if not can_ban:
                self.bot.reply_to(message, f"‚ùå {error_msg}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –±–∞–Ω–∞ –∏ –ø—Ä–∏—á–∏–Ω—É
            ban_time = Config.DEFAULT_BAN_TIME
            reason = ""

            if len(parts) >= 3:
                try:
                    ban_time = int(parts[2])
                except ValueError:
                    # –ï—Å–ª–∏ —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —á–∏—Å–ª–æ, —Ç–æ —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–∞
                    reason = " ".join(parts[2:])
            if len(parts) >= 4 and ban_time != Config.DEFAULT_BAN_TIME:
                reason = " ".join(parts[3:])

            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if Database.ban_user(target_username, username, ban_time):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                ban_info = Database.get_ban_info(target_username)
                ban_duration = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫" if ban_time == 0 else f"{ban_time} —á–∞—Å–æ–≤"
                ban_message = (
                    "üö´ <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–µ—Ç–∫–µ –±–æ—Ç–æ–≤!</b>\n\n"
                    f"üëÆ –ö—Ç–æ –≤—ã–¥–∞–ª: @{username}\n"
                    f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {ban_duration}\n"
                )
                if reason:
                    ban_message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"

                Utils.send_message_to_user(self.bot, target_username, ban_message)

                self.bot.reply_to(message, f"‚úÖ @{target_username} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {ban_duration}")
            else:
                self.bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å @{target_username}")

        else:
            # –†–∞–∑–±–∞–Ω
            if not Database.is_global_admin(username):
                self.bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞!")
                return

            if Database.unban_user(target_username):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                unban_message = "‚úÖ <b>–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–µ—Ç–∫–µ –±–æ—Ç–æ–≤!</b>"
                Utils.send_message_to_user(self.bot, target_username, unban_message)

                self.bot.reply_to(message, f"‚úÖ @{target_username} —Ä–∞–∑–±–∞–Ω–µ–Ω")
            else:
                self.bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å @{target_username}")

    def handle_warn_unwarn(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏/—Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_global_admin(username):
            self.bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        parts = message.text.split()
        if len(parts) < 2:
            self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn @username [–ø—Ä–∏—á–∏–Ω–∞] –∏–ª–∏ /unwarn @username")
            return

        target_username = Utils.extract_username(parts[1])
        if not target_username:
            self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(target_username):
            self.bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∞—Ä–Ω
        can_warn, error_msg = Database.can_warn_user(username, target_username)
        if not can_warn:
            self.bot.reply_to(message, f"‚ùå {error_msg}")
            return

        action = "warn" if parts[0].startswith('/warn') else "unwarn"

        if action == "warn":
            reason = " ".join(parts[2:]) if len(parts) > 2 else ""

            success, result = Database.add_warn(target_username, username, reason)
            if success:
                if result == "banned":
                    self.bot.reply_to(message, f"‚úÖ @{target_username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    user_data = Database.get_user(target_username)
                    warn_message = (
                        "‚ö†Ô∏è <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
                        f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data['warns']}/{Config.MAX_WARN}\n"
                        f"üëÆ –ö—Ç–æ –≤—ã–¥–∞–ª: @{username}\n"
                    )
                    if reason:
                        warn_message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"

                    Utils.send_message_to_user(self.bot, target_username, warn_message)

                    self.bot.reply_to(message, f"‚úÖ @{target_username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({user_data['warns']}/{Config.MAX_WARN})")
            else:
                self.bot.reply_to(message, f"‚ùå {result}")

        else:
            # –°–Ω—è—Ç–∏–µ –≤–∞—Ä–Ω–∞
            if Database.remove_warn(target_username):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                user_data = Database.get_user(target_username)
                unwarn_message = (
                    "‚úÖ <b>–° –≤–∞—Å —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
                    f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data['warns']}/{Config.MAX_WARN}"
                )
                Utils.send_message_to_user(self.bot, target_username, unwarn_message)

                self.bot.reply_to(message, f"‚úÖ –° @{target_username} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({user_data['warns']}/{Config.MAX_WARN})")
            else:
                self.bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å @{target_username}")

    def handle_list(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_local_admin(username):
            self.bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        self.bot.send_message(
            message.chat.id,
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=Keyboards.user_list_menu()
        )

    def handle_getinfo(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /getinfo"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_global_admin(username):
            self.bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        parts = message.text.split()
        if len(parts) < 2:
            self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getinfo @username")
            return

        target_username = Utils.extract_username(parts[1])
        if not target_username:
            self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(target_username):
            self.bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return

        user_data = Database.get_user(target_username)
        if not user_data:
            self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
            return

        rank_text = {
            'operator': '‚ö° –û–ø–µ—Ä–∞—Ç–æ—Ä',
            'gadmin': 'üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'ladmin': 'ü™õ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }.get(user_data.get('rank', 'user'), 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

        banned_status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if Database.is_banned(target_username) else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"

        if user_data['rank'] in ['gadmin', 'operator']:
            info_text = (
                "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
                f"üìß Username: @{target_username}\n"
                f"üë®‚Äçüíº –†–∞–Ω–≥: {rank_text}\n"
                f"üÜî ID: <code>{user_data['id']}</code>\n"
                f"üìõ –ò–º—è: {user_data['first_name']}"
            )
        else:
            info_text = (
                "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
                f"üìß Username: @{target_username}\n"
                f"üë®‚Äçüíº –†–∞–Ω–≥: {rank_text}\n"
                f"üÜî ID: <code>{user_data['id']}</code>\n"
                f"üìõ –ò–º—è: {user_data['first_name']}\n"
                f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {banned_status}\n"
                f"üí¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {user_data['warns']}/{Config.MAX_WARN}"
            )

        self.bot.reply_to(message, info_text, parse_mode='HTML')

    def handle_reguser(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reguser - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_global_admin(username):
            self.bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        if not message.reply_to_message:
            self.bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return

        reply_username = message.reply_to_message.from_user.username
        if not reply_username:
            self.bot.reply_to(message, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
        if Database.add_user(
            message.reply_to_message.from_user.id,
            reply_username,
            message.reply_to_message.from_user.first_name
        ):
            self.bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{reply_username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        else:
            self.bot.reply_to(message, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{reply_username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")

    def handle_stats(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_operator(username):
            self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
            return

        stats_text = Utils.get_stats()
        self.bot.reply_to(message, stats_text, parse_mode='HTML')

    def handle_alarm(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /alarm - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        if not Database.is_operator(username):
            self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
            return

        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alarm <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        alarm_message = parts[1]
        users = Database.load_users()

        sent_count = 0
        total_count = len(users)

        progress_msg = self.bot.reply_to(message, f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 0/{total_count}")

        for user_username, user_data in users.items():
            try:
                if not Database.is_banned(user_username) and 'id' in user_data:
                    full_message = f"üö® <b>–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!</b>\n\n{alarm_message}"
                    self.bot.send_message(user_data['id'], full_message, parse_mode='HTML')
                    sent_count += 1

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
                    if sent_count % 10 == 0:
                        self.bot.edit_message_text(
                            f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count}/{total_count}",
                            progress_msg.chat.id,
                            progress_msg.message_id
                        )
                    time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è @{user_username}: {e}")
                continue

        self.bot.edit_message_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count}/{total_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            progress_msg.chat.id,
            progress_msg.message_id
        )

    def handle_all_messages(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        username = message.from_user.username
        if not username:
            self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(username):
            self.bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        if Database.is_banned(username):
            self.bot.reply_to(message, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –õ–° –Ω–µ –º–æ–≥—É—Ç –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å
        if (message.chat.type == 'private' and
            Database.get_user_rank(username) == 'user'):
            self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.")
            return

    def handle_callback_query(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        username = call.from_user.username
        if not username or Database.is_banned(username):
            return

        if call.data.startswith('list_'):
            list_type = call.data.split('_')[1]
            self.handle_list_callback(call, list_type)

        elif call.data.startswith('promote_'):
            rank = call.data.split('_')[1]
            self.handle_promote_callback(call, rank)

        elif call.data.startswith('ladmin_bot_'):
            bot_name = call.data.split('ladmin_bot_')[1]
            self.handle_ladmin_bot_selection(call, bot_name)

        elif call.data == 'cancel_action':
            self.bot.delete_message(call.message.chat.id, call.message.message_id)
            self.bot.answer_callback_query(call.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    def handle_list_callback(self, call: CallbackQuery, list_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
        admins = Database.load_admins()
        users = Database.load_users()

        if list_type == 'ladmin':
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
            bots = Database.get_all_bots()
            all_ladmins = set()
            for bot in bots.values():
                all_ladmins.update(bot.get('ladmins', []))
            text = Utils.format_user_list(list(all_ladmins), 'ladmin')
        elif list_type == 'gadmin':
            text = Utils.format_user_list(admins['global_admins'], 'gadmin')
        elif list_type == 'operator':
            text = Utils.format_user_list(admins['operators'], 'operator')
        else:
            text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø–∏—Å–∫–∞"

        self.bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )

    def handle_promote_callback(self, call: CallbackQuery, rank):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = call.from_user.username
        if not username or Database.is_banned(username):
            self.bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if not Database.is_operator(username):
            self.bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = call.message.text
        if "–¥–ª—è @" in message_text:
            target_username = message_text.split("–¥–ª—è @")[1].split(":")[0].strip()
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        if not target_username:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(target_username):
            self.bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if Database.is_banned(target_username):
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–ª—å–∑—è –ø–æ–≤—ã—Å–∏—Ç—å –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ!")
            return

        if rank == 'ladmin':
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–æ—Ç–∞
            bots = Database.get_all_bots()
            if not bots:
                self.bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤!")
                return

            self.bot.edit_message_text(
                f"ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è @{target_username} –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=self.get_bot_selection_keyboard()
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        rank_translation = {
            'gadmin': '–≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'operator': '–æ–ø–µ—Ä–∞—Ç–æ—Ä'
        }

        success = False
        message = ""

        if rank == 'gadmin':
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã
            success = Database.add_global_admin(target_username)
            message = f"‚úÖ @{target_username} –ø–æ–≤—ã—à–µ–Ω –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—ã—Å–∏—Ç—å @{target_username}"

        elif rank == 'operator':
            # –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            success = Database.add_operator(target_username)
            message = f"‚úÖ @{target_username} –ø–æ–≤—ã—à–µ–Ω –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—ã—Å–∏—Ç—å @{target_username}"

        if success:
            logger.info(f"@{username} –ø–æ–≤—ã—Å–∏–ª @{target_username} –¥–æ {rank}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.bot.edit_message_text(
            message,
            call.message.chat.id,
            call.message.message_id
        )

        self.bot.answer_callback_query(call.id)

    def handle_op_unop(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ op/unop (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å)"""
        # –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        if message.chat.type != 'private':
            self.bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥—ã /op –∏ /unop –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å!")
        else:
            self.bot.reply_to(message, "‚ùå –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!")

    @staticmethod
    def get_bot_selection_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        bots = Database.get_all_bots()
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        for bot_name in bots.keys():
            keyboard.add(
                types.InlineKeyboardButton(
                    f"ü§ñ {bot_name}",
                    callback_data=f"ladmin_bot_{bot_name}"
                )
            )

        keyboard.add(
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
        )
        return keyboard

    def handle_ladmin_bot_selection(self, call: CallbackQuery, bot_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        username = call.from_user.username
        if not username or Database.is_banned(username):
            self.bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if not Database.is_operator(username):
            self.bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = call.message.text
        if "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è @" in message_text:
            target_username = message_text.split("–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è @")[1].split()[0].strip()
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if not Database.user_exists(target_username):
            self.bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        success = Database.add_ladmin_to_bot(target_username, bot_name)

        if success:
            message = f"‚úÖ @{target_username} –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –±–æ—Ç–∞ {bot_name}"
            logger.info(f"@{username} –Ω–∞–∑–Ω–∞—á–∏–ª @{target_username} –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º –¥–ª—è {bot_name}")
        else:
            message = f"‚ÑπÔ∏è @{target_username} —É–∂–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è {bot_name}"

        self.bot.edit_message_text(
            message,
            call.message.chat.id,
            call.message.message_id
        )

        self.bot.answer_callback_query(call.id)

    def handle_bot_management(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏: addbot, removebot, startbot, stopbot"""
        username = message.from_user.username
        if not username or Database.is_banned(username):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ - —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–∞–º–∏
        if not Database.is_operator(username):
            self.bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–∞–º–∏!")
            return

        parts = message.text.split()
        if len(parts) < 2:
            self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!")
            return

        command = parts[0].lower()
        bot_name = parts[1].strip()

        if command == '/addbot':
            self.handle_add_bot(message, bot_name, parts)
        elif command == '/removebot':
            self.handle_remove_bot(message, bot_name)
        elif command == '/startbot':
            self.handle_start_bot(message, bot_name)
        elif command == '/stopbot':
            self.handle_stop_bot(message, bot_name)
        else:
            self.bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

    def handle_add_bot(self, message: Message, bot_name: str, parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        if len(parts) < 4:
            self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbot <–∏–º—è_–±–æ—Ç–∞> <@—é–∑–µ—Ä–Ω–µ–π–º_–±–æ—Ç–∞> <—Ç–∏–ø>")
            return

        bot_username = parts[2]
        bot_type = parts[3]

        exe_path = os.path.join(Config.BOTS_DIR, f'{bot_name}.exe')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—É—Ç–∏
        if not os.path.exists(exe_path):
            self.bot.reply_to(message, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exe_path}")
            return

        if not exe_path.lower().endswith('.exe'):
            self.bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ .exe —Ñ–∞–π–ª—É!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ –±–∞–∑—É
        if Database.add_bot(bot_name, exe_path, bot_username, bot_type):
            self.bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                                       f"ü§ñ Username: {bot_username}\n"
                                       f"üîß –¢–∏–ø: {bot_type}\n"
                                       f"üìÅ –ü—É—Ç—å: {exe_path}")
        else:
            self.bot.reply_to(message, f"‚ùå –ë–æ—Ç '{bot_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    def handle_remove_bot(self, message: Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        if Database.remove_bot(bot_name):
            self.bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            self.bot.reply_to(message, f"‚ùå –ë–æ—Ç '{bot_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def handle_start_bot(self, message: Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        bots = Database.get_all_bots()

        if bot_name not in bots:
            self.bot.reply_to(message, f"‚ùå –ë–æ—Ç '{bot_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        bot = bots[bot_name]
        if not bot.get('exe'):
            self.bot.reply_to(message, f"‚ùå –î–ª—è –±–æ—Ç–∞ '{bot_name}' –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ exe!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        status = Utils.get_bot_status(bot_name)
        if status == "running":
            self.bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        elif status == "error":
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ '{bot_name}'!")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        success, result = Utils.start_bot(bot_name)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            bot['state'] = True
            Database.save_bots(bots)

        self.bot.reply_to(message, result)

    def handle_stop_bot(self, message: Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        bots = Database.get_all_bots()

        if bot_name not in bots:
            self.bot.reply_to(message, f"‚ùå –ë–æ—Ç '{bot_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        status = Utils.get_bot_status(bot_name)
        if status == "stopped":
            self.bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        elif status == "error":
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ '{bot_name}'!")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        success, result = Utils.stop_bot(bot_name)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            bot = bots[bot_name]
            bot['state'] = False
            Database.save_bots(bots)

        self.bot.reply_to(message, result)